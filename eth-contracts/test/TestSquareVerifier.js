// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const Verifier = artifacts.require("./Verifier.sol");
const { assert } = require('console');
const fs = require('fs');
const proofTree = JSON.parse(fs.readFileSync("../zokrates/code/square/proof.json"));

contract('TestSquareVerifier', accounts => {

    before('setup contract', async () => {
        proof = proofTree.proof
        verifier = await Verifier.new();
    });

    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    it('Verification with correct proof', async () => {
        let result = await verifier.verifyTx.call(proof.A, proof.A_p, proof.B, proof.B_p, proof.C, proof.C_p, proof.H, proof.K, proofTree.input);
        assert(result == true);
    });
    
    // Test verification with incorrect proof
    it('Verification with incorrect proof', async () => {
        let result = await verifier.verifyTx.call(proof.A, proof.B_p, proof.B, proof.B_p, proof.C, proof.C_p, proof.H, proof.K, proof.H);
        assert(result == false);
    });
})